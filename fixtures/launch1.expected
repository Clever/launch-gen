package packagename

import (
	client1 "github.com/Clever/dapple/gen-go/client"
	client "github.com/Clever/workflow-manager/gen-go/client"
	"log"
	"os"
)

/*
WARNING this file was auto-generated by launch-gen, do not modify
*/

// LaunchConfig is auto-generated based on the launch YML file
type LaunchConfig struct {
	Deps Dependencies
	Env  Environment
	AwsResources
}

// Dependencies has clients for the service's dependencies
type Dependencies struct {
	WorkflowManager client.Client
	Dapple          client1.Client
}

// Environment has environment variables and their values
type Environment struct {
	EnvVarA            string
	EnvVarB            string
	TracingAccessToken string
}

// AwsResources contains string IDs that will help for accessing various AWS resources
type AwsResources struct {
	CommonBucket string
	ReadBucket   string
	WriteBucket  string
}

// InitLaunchConfig creates a LaunchConfig
func InitLaunchConfig() LaunchConfig {
	workflowManager, err := client.NewFromDiscovery()
	if err != nil {
		log.Fatalf("discovery error: %s", err)
	}
	dapple, err := client1.NewFromDiscovery()
	if err != nil {
		log.Fatalf("discovery error: %s", err)
	}
	return LaunchConfig{
		AwsResources: AwsResources{
			CommonBucket: getS3NameByEnv("common-bucket"),
			ReadBucket:   getS3NameByEnv("read-bucket"),
			WriteBucket:  getS3NameByEnv("write-bucket"),
		},
		Deps: Dependencies{
			Dapple:          dapple,
			WorkflowManager: workflowManager,
		},
		Env: Environment{
			EnvVarA:            requireEnvVar("ENV_VAR_A"),
			EnvVarB:            requireEnvVar("ENV_VAR_B"),
			TracingAccessToken: os.Getenv("TRACING_ACCESS_TOKEN"),
		},
	}
}

// requireEnvVar exits the program immediately if an env var is not set
func requireEnvVar(s string) string {
	val := os.Getenv(s)
	if val == "" {
		log.Fatalf("env var %s is not defined", s)
	}
	return val
}

// getS3NameByEnv adds "-dev" to an env var name unless we're in "production" deploy env
func getS3NameByEnv(s string) string {
	env := os.Getenv("DEPLOY_ENV")
	if env == "production" {
		return s
	}
	return s + "-dev"
}
