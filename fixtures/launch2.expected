package packagename

import (
	v5 "github.com/Clever/dapple/gen-go/client/v5"
	logger "github.com/Clever/kayvee-go/v7/logger"
	client "github.com/Clever/workflow-manager/gen-go/client"
	"log"
	"os"
)

// Code generated by launch-gen DO NOT EDIT.

// LaunchConfig is auto-generated based on the launch YML file
type LaunchConfig struct {
	Deps Dependencies
	Env  Environment
	AwsResources
}

// Dependencies has clients for the service's dependencies
type Dependencies struct {
	WorkflowManager client.Client
	Dapple          v5.Client
}

// Environment has environment variables and their values
type Environment struct {
	EnvVarA            string
	EnvVarB            string
	TracingAccessToken string
}

// AwsResources contains string IDs that will help for accessing various AWS resources
type AwsResources struct {
	S3ReadAndWriteMe string
	S3ReadMe         string
	S3WriteMe        string
}

// InitLaunchConfig creates a LaunchConfig
func InitLaunchConfig() LaunchConfig {
	workflowManager, err := client.NewFromDiscovery(client.WithLogger(logger.NewConcreteLogger("workflow-manager-wagclient")))
	if err != nil {
		log.Fatalf("discovery error: %s", err)
	}
	dapple, err := v5.NewFromDiscovery(v5.WithLogger(logger.NewConcreteLogger("dapple-wagclient")))
	if err != nil {
		log.Fatalf("discovery error: %s", err)
	}
	return LaunchConfig{
		AwsResources: AwsResources{
			S3ReadAndWriteMe: getS3NameByEnv("read-and-write-me"),
			S3ReadMe:         getS3NameByEnv("read-me"),
			S3WriteMe:        getS3NameByEnv("write-me"),
		},
		Deps: Dependencies{
			Dapple:          dapple,
			WorkflowManager: workflowManager,
		},
		Env: Environment{
			EnvVarA:            requireEnvVar("ENV_VAR_A"),
			EnvVarB:            requireEnvVar("ENV_VAR_B"),
			TracingAccessToken: os.Getenv("TRACING_ACCESS_TOKEN"),
		},
	}
}

// requireEnvVar exits the program immediately if an env var is not set
func requireEnvVar(s string) string {
	val, present := os.LookupEnv(s)
	if !present {
		log.Fatalf("env var %s is not defined", s)
	}
	return val
}

// getS3NameByEnv adds "-dev" to an env var name unless we're in "production" deploy env
// We check both DEPLOY_ENV and _DEPLOY_ENV env vars, which are injected by our deployment system for Lambda and non-Lambda deployments, respectively
func getS3NameByEnv(s string) string {
	env := os.Getenv("DEPLOY_ENV")
	if env == "" {
		env = os.Getenv("_DEPLOY_ENV")
	}
	if env == "" {
		log.Fatal("Unable to determine deployment environment (DEPLOY_ENV and _DEPLOY_ENV are undefined)")
	}
	if env == "production" {
		return s
	}
	return s + "-dev"
}
